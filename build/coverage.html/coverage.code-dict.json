{"/home/travis/build/npmtest/node-npmtest-git-changelog/test.js":"/* istanbul instrument in package npmtest_git_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-changelog/lib.npmtest_git_changelog.js":"/* istanbul instrument in package npmtest_git_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_changelog = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_changelog = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-changelog/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-changelog && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_changelog\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_changelog.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_changelog.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_changelog.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_changelog.__dirname + '/lib.npmtest_git_changelog.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/Gruntfile.js":"/*\n * git-changelog\n * https://github.com/rafinskipg/git-changelog\n *\n * Copyright (c) 2013 rafinskipg\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/**/*.js',\n        'test/**/*.spec.js'\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: [\n        'output/tag1.md',\n        'EXTENDEDCHANGELOG.md'\n      ],\n    },\n\n    // Configuration to be run (and then tested).\n    git_changelog: {\n      minimal: {\n        options: {\n          app_name : 'Git changelog',\n          logo : 'https://github.com/rafinskipg/git-changelog/raw/master/images/git-changelog-logo.png',\n          intro : 'Git changelog is a utility tool for generating changelogs. It is free and opensource. :)'\n        }\n      },\n      tag1: {\n        options: {\n          app_name : 'Since tag 1 changelog',\n          intro: 'This changelog is from the previous tag',\n          file: 'output/tag1.md',\n          logo : 'https://github.com/rafinskipg/git-changelog/raw/master/images/git-changelog-logo.png',\n          version_name : 'squeezy potatoe',\n          tag: 'v0.0.1',\n          debug: true,\n          sections: [\n            {\n              \"title\": \"Bug Fixes\",\n              \"grep\": \"^fix\"\n            },\n            {\n              \"title\": \"Pull requests merged\",\n              \"grep\": \"^Merge pull request\"\n            }\n          ]\n        }\n      },\n      customTemplate: {\n        options: {\n          app_name : 'Custom Template',\n          intro: 'This changelog is generated with a custom template',\n          file: 'output/customTemplate.md',\n          template: 'templates/template_two.md',\n          logo : 'https://github.com/rafinskipg/git-changelog/raw/master/images/git-changelog-logo.png',\n          version_name : 'squeezy potatoe',\n          tag: 'v0.0.1',\n          debug: true\n        }\n      },\n      extended: {\n        options: {\n          app_name : 'Git changelog extended',\n          logo : 'https://github.com/rafinskipg/git-changelog/raw/master/images/git-changelog-logo.png',\n          intro : 'Git changelog is a utility tool for generating changelogs. It is free and opensource. :)',\n          repo_url: 'https://github.com/rafinskipg/git-changelog',\n          tag: false,\n          debug: true,\n          file : 'EXTENDEDCHANGELOG.md',\n          sections: [\n            {\n              \"title\": \"Bug Fixes\",\n              \"grep\": \"^fix\"\n            },\n            {\n              \"title\": \"Features\",\n              \"grep\": \"^feat\"\n            },\n            {\n              \"title\": \"Documentation\",\n              \"grep\": \"^docs\"\n            },\n            {\n              \"title\": \"Breaking changes\",\n              \"grep\": \"BREAKING\"\n            },\n            {\n              \"title\": \"Refactor\",\n              \"grep\": \"^refactor\"\n            },\n            {\n              \"title\": \"Style\",\n              \"grep\": \"^style\"\n            },\n            {\n              \"title\": \"Test\",\n              \"grep\": \"^test\"\n            },\n            {\n              \"title\": \"Chore\",\n              \"grep\": \"^chore\"\n            },\n            {\n              \"title\": \"Branchs merged\",\n              \"grep\": \"^Merge branch\"\n            },\n            {\n              \"title\" : \"Pull requests merged\",\n              \"grep\": \"^Merge pull request\"\n            }\n          ]\n        }\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js'],\n    },\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          //captureFile: 'tests/results.txt', // Optionally capture the reporter output to a file\n          quiet: false // Optionally suppress output to standard out (defaults to false)\n        },\n        src: ['test/**/*.spec.js']\n      }\n    },\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('pre-test', ['clean', 'git_changelog']);\n  // grunt.registerTask('test', ['clean', 'git_changelog', 'mochaTest']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'pre-test']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('ch', [ 'git_changelog']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/command.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar program = require('commander');\nvar git_changelog = require('./git_changelog_generate');\nvar defaults = require('./defaults');\nvar _ = require('lodash');\nvar options = _.defaults({}, defaults);\n\n\nif (process.argv.join('').replace(/\\\\/g,'/').indexOf('/grunt') === -1) {\n\n  program\n    .version(require('../package').version)\n    .option('-e, --extended', 'Extended log')\n    .option('-n, --version_name [version_name]', 'Name of the version')\n    .option('-a, --app_name [app_name]', 'Name [app_name]')\n    .option('-b, --branch [branch]', 'Branch name [branch]')\n    .option('-f, --file [file]', 'File [file]')\n    .option('-tpl, --template [template]', 'Template [template]')\n    .option('-r, --repo_url [repo_url]', 'Repo url [repo_url]')\n    .option('-l, --logo [logo]', 'Logo path [logo]')\n    .option('-i, --intro [intro]', 'intro text [intro]')\n    .option('-t, --tag [tag]', 'Since tag [tag]')\n    .option('-rc, --changelogrc [changelogrc]', '.changelogrc relative path [changelogrc]')\n    .option('-g, --grep [grep]', 'Grep commits for [grep]')\n    .option('-d, --debug', 'Debugger')\n    .option('-p, --provider [provider]', 'Provider: gitlab, github, bitbucket (Optional)')\n    .parse(process.argv);\n\n  console.log('Executing git changelog:');\n\n  if (program.extended){\n    console.log('  - Extended, getting log since the BigBang');\n    options.tag = false;\n  }\n\n  if (program.version_name){\n    options.version_name = program.version_name;\n  }\n\n  if (program.app_name){\n    options.app_name = program.app_name;\n  }\n\n  if (program.branch){\n    options.branch = program.branch;\n    console.log('  - Branch %s', program.branch);\n  }\n  if (program.debug){\n    console.log('Debug enabled');\n    options.debug = program.debug;\n  }\n\n  if (program.file){\n    options.file = program.file;\n  }\n\n  if (program.template){\n    options.template = program.template;\n  }\n\n  if (program.changelogrc){\n    options.changelogrc = program.changelogrc;\n  }\n\n  if (program.logo){\n    options.logo = program.logo;\n  }\n  if (program.intro){\n    options.intro = program.intro;\n  }\n\n  if (program.repo_url){\n    options.repo_url = program.repo_url;\n    console.log('  - With URL %s', program.repo_url);\n  }\n\n  if (program.provider){\n    options.provider = program.provider;\n    console.log('  - With forced provider %s', program.provider);\n  }\n\n  if (program.tag !== undefined){\n    if(program.tag === false || program.tag === \"false\"){\n      options.tag = false;\n      console.log('  - No tag, getting log since the BigBang');\n    }else{\n      options.tag = program.tag;\n      console.log('  - Generating log since tag %s', program.tag);\n    }\n  }\n\n  git_changelog.generate(options, true).then(function(){\n    git_changelog.log('success', 'Finished generating log Yai!');\n  });\n\n}\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/git_changelog_generate.js":"/*\n * git-changelog\n * https://github.com/rafinskipg/git-changelog\n */\n\nvar debug = require('debug')('changelog');\n\n//ALLOWED_COMMITS = '^fix|^feat|^docs|BREAKING',\n//git-describe - Show the most recent tag that is reachable from a commit\n\nvar Changelog = function Changelog() {\n  debug('initializing constructor');\n  this.setDefaults();\n};\n\nChangelog.prototype.init = require('./lib/init');\nChangelog.prototype.initOptions = require('./lib/init-options');\nChangelog.prototype.setDefaults = require('./lib/set-defaults');\nChangelog.prototype.message = require('./lib/message');\nChangelog.prototype.getProviderLinks = require('./lib/get-provider-links');\nChangelog.prototype.loadChangelogRc = require('./lib/load-changelog-rc');\nChangelog.prototype.loadTemplate = require('./lib/load-template');\nChangelog.prototype.getGitLogCommands = require('./lib/get-gitlog-commands');\nChangelog.prototype.parseRawCommit = require('./lib/parse-raw-commit');\nChangelog.prototype.linkToIssue = require('./lib/link-to-issue');\nChangelog.prototype.linkToCommit = require('./lib/link-to-commit');\nChangelog.prototype.currentDate = require('./lib/current-date');\nChangelog.prototype.printHeader = require('./lib/print-header');\nChangelog.prototype.printSection = require('./lib/print-section');\nChangelog.prototype.printCommit = require('./lib/print-commit');\nChangelog.prototype.printSalute = require('./lib/print-salute');\nChangelog.prototype.readGitLog = require('./lib/read-gitlog');\nChangelog.prototype.writeChangelog = require('./lib/write-change-log');\nChangelog.prototype.organizeCommits = require('./lib/organize-commits');\nChangelog.prototype.getPreviousTag = require('./lib/get-previous-tag');\nChangelog.prototype.getRepoUrl = require('./lib/get-repo-url');\nChangelog.prototype.generate = require('./lib/generate');\n\nChangelog.prototype.log = require('./lib/log');\n\nvar changelog = new Changelog();\n\nmodule.exports = changelog;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/init.js":"'use strict';\n\nvar q = require('q');\nvar _ = require('lodash');\n\nfunction getRepoSuccess(deferred, url) {\n  var module = this;\n\n  this.options.repo_url = url;\n  this.message('remote', this.options.repo_url);\n\n  this.getProviderLinks();\n  this.getGitLogCommands();\n  deferred.resolve();\n}\n\nfunction getRepoFailure(deferred, err) {\n  this.message('not remote');\n  deferred.reject(err);\n}\n\nfunction init(params, loadRC) {\n  this.log('debug', 'Initializing changelog options');\n  var module = this;\n\n  var deferred = q.defer();\n\n  this.initOptions(params);\n  var promise = loadRC ? this.loadChangelogRc() : new Promise(function (resolve) { resolve(params); });\n\n  promise\n    .then(function(options) {\n\n      module.options = _.defaults(options, module.options);\n\n      module.log('info', '  - The APP name is', module.options.app_name);\n      module.log('info', '  - The output file is', module.options.file);\n      module.log('info', '  - The template file is', module.options.template);\n\n      module.options.grep_commits = module.options.sections.map(function(section) {\n        return section.grep;\n      }).join('|');\n\n      module.log('debug', 'Grep commits: ', module.options.grep_commits);\n    \n      return module.getRepoUrl();\n    })\n    .then(getRepoSuccess.bind(this, deferred))\n    .catch(getRepoFailure.bind(this, deferred));\n\n  return deferred.promise;\n}\n\nmodule.exports = init;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/init-options.js":"'use strict';\n\nvar debug = require('debug')('changelog:initOptions');\nvar _ = require('lodash');\n\nvar defaults = require('../defaults');\n\nfunction initOptions(params) {\n  debug('initializing options');\n  this.setDefaults();\n\n  this.options = _.defaults(params, defaults);\n\n  this.options.msg = '';\n  this.message('name', this.options.app_name);\n  this.message('intro', this.options.intro);\n  this.message('file', this.options.file);\n  this.message('template', this.options.template);\n  this.message('logo', this.options.logo);\n  this.message('sections', this.options.sections);\n  this.message('debug', this.options.debug);\n  this.message('version_name', this.options.version_name);\n  this.message('changelogrc', this.options.changelogrc);\n}\n\nmodule.exports = initOptions;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/defaults.js":"//Defaults options\nmodule.exports = {\n  branch : '',\n  //[G]ithub [B]itbucket supported at the momment\n  repo_url: '',\n  provider: null,\n  version_name : '',\n  file: 'CHANGELOG.md',\n  app_name : 'My app - Changelog',\n  tag: null,\n  logo : null,\n  intro : null,\n  debug: false,\n  template: 'templates/template.md',\n  changelogrc : '.changelogrc',\n  sections: [\n    {\n      title: 'Bug Fixes',\n      grep: '^fix'\n    },\n    {\n      title: 'Features',\n      grep: '^feat'\n    },\n    {\n      title: 'Documentation',\n      grep: '^docs'\n    },\n    {\n      title: 'Breaking changes',\n      grep: 'BREAKING'\n    },\n    {\n      title: 'Refactor',\n      grep: '^refactor'\n    },\n    {\n      title: 'Style',\n      grep: '^style'\n    },\n    {\n      title: 'Test',\n      grep: '^test'\n    },\n    {\n      title: 'Chore',\n      grep: '^chore'\n    }\n  ]\n\n};\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/set-defaults.js":"'use strict';\n\nvar debug = require('debug')('changelog:setDefaults');\n\nfunction setDefaults() {\n  debug('setting defaults');\n  this.options = {};\n  this.cmd = {\n    gitTag: 'git tag | tail -n1',\n    gitRepoUrl: 'git config --get remote.origin.url',\n    gitLog: null,\n    gitLogNoTag: null\n  };\n  this.header = '<a name=\"%s\">%s</a>\\n# %s (%s)\\n\\n';\n  this.emptyComponent = '$$';\n  this.links = null;\n  this.provider = null;\n}\n\nmodule.exports = setDefaults;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/message.js":"'use strict';\n\nvar debug = require('debug')('changelog:message');\n\nfunction message() {\n  debug('adding message');\n  Array.prototype.slice.call(arguments).forEach(function(value, index) {\n    this.options.msg += (index ? ': ' : '') + value;\n  }, this);\n\n  this.options.msg += ';';\n}\n\nmodule.exports = message;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/get-provider-links.js":"'use strict';\n\nvar debug = require('debug')('changelog:getProviderLinks');\n\nfunction getProviderLinks() {\n    debug('getting provider links');\n    // This is just in case they differ their urls at some point in the future.\n    // Also brings the posibility of adding more providers\n    var providerLinks = {\n        github: {\n            issue: '[#%s](' + this.options.repo_url + '/issues/%s)',\n            commit: '[%s](' + this.options.repo_url + '/commit/%s)'\n        },\n        bitbucket: {\n            issue: '[#%s](' + this.options.repo_url + '/issues/%s)',\n            commit: '[%s](' + this.options.repo_url + '/commits/%s)'\n        },\n        gitlab: {\n            issue: '[#%s](' + this.options.repo_url + '/issues/%s)',\n            commit: '[%s](' + this.options.repo_url + '/commit/%s)'\n        }\n    };\n\n    if (this.options.provider && typeof(providerLinks[this.options.provider]) !== 'undefined') {\n        this.provider = this.options.provider;\n    }\n    else {\n        if (this.options.repo_url.match(/bitbucket/)) {\n            this.provider = 'bitbucket';\n        } else if (this.options.repo_url.match(/gitlab/)) {\n            this.provider = 'gitlab';\n        } else {\n            // use github as default provider\n            this.provider = 'github';\n        }\n    }\n    this.links = providerLinks[this.provider];\n}\n\nmodule.exports = getProviderLinks;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/load-changelog-rc.js":"'use strict';\n\nvar debug = require('debug')('changelog:loadChangelogRc');\nvar q = require('q'),\n  fs = require('fs');\n\nfunction readChangelogRcFile(changelogrc, logger) {\n  debug('finding changelogrc file');\n\n  if(!changelogrc){\n    return q.reject();\n  }\n\n  var dfd = q.defer();\n\n  fs.readFile(changelogrc, 'utf8' ,function (err, data) {\n    if (err) {\n      logger('error', 'No changelog found', err);\n      dfd.reject(err);\n    }else{\n      logger('info', 'Found changelog rc');\n      dfd.resolve(data);\n    }\n  });\n\n  return dfd.promise;\n}\n\n\nfunction loadChangelogRc() {\n  this.log('debug','loading changelog rc specification from', this.options.changelogrc);\n  var module = this;\n  var deferred = q.defer();\n\n  readChangelogRcFile(this.options.changelogrc, this.log.bind(this))\n    .then(function(contents){\n\n      try{\n        contents = JSON.parse(contents);\n\n        deferred.resolve(contents);\n      }catch(e){\n        module.log('error', 'Invalid changelogrc file', e);\n        return deferred.reject('Invalid changelogrc file' + e);\n      }\n\n    })\n    .catch(function(){\n      var sectionNames = module.options.sections.map(function(section){\n        return section.title;\n      }).join(', ');\n\n      module.log('error', 'No .changelog.rc file found, using default settings');\n      module.log('info', 'Sections: ', sectionNames);\n      deferred.resolve({});\n    }.bind(this));\n\n  return deferred.promise;\n}\n\nmodule.exports = loadChangelogRc;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/load-template.js":"'use strict';\n\nvar debug = require('debug')('changelog:loadTemplateFile');\nvar q = require('q');\nvar _ = require('lodash');\nvar fs = require('fs');\n\n\nfunction loadDefaultTemplate(logger){\n  return new Promise(function(resolve, reject){\n\n    debug('loading default template');\n\n    fs.readFile(__dirname +'/../../templates/template.md', 'utf8', function(err, data){\n      if (err) {\n        logger('error', 'No default template found', err);\n        resolve(null);\n      }else{\n        logger('info', 'Found default template');\n        resolve(data);\n      }\n    });\n    \n  });\n}\n\n\nfunction readTemplateFile(template, logger) {\n  debug('finding template file');\n\n  if(!template){\n    return Promise.resolve(null);\n  }\n\n  var dfd = q.defer();\n\n  fs.readFile(template, 'utf8' ,function (err, data) {\n    if (err) {\n      logger('error', 'No custom template found', err);\n      loadDefaultTemplate(logger)\n        .then(dfd.resolve)\n        .catch(dfd.reject);\n    }else{\n      logger('info', 'Found template');\n      dfd.resolve(data);\n    }\n  });\n\n  return dfd.promise;\n}\n\n\nfunction loadTemplateFile(data) {\n  this.log('debug','loading template from', this.options.template);\n  \n  var module = this;\n\n  var viewHelpers = {\n    getCommitLinks: function(commit){\n      return module.linkToCommit(commit.hash);\n    },\n    getCommitCloses: function(commit){\n      return commit.closes.map(module.linkToIssue, module);\n    },\n    printCommit: this.printCommit.bind(this)\n  };\n\n  _.extend(data, viewHelpers);\n\n  return readTemplateFile(this.options.template, this.log.bind(this))\n    .then(function(contents){\n      if(contents){\n        try{  \n          var fn = _.template(contents, data);\n          var tpl =  fn(data);\n          return tpl;\n        }catch(e){\n          module.log('error', 'Invalid template file', e);\n          throw 'Invalid template file \\n' + e;\n        }\n      }else{\n        return null;\n      }\n    });\n}\n\nmodule.exports = loadTemplateFile;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/get-gitlog-commands.js":"'use strict';\n\nvar debug = require('debug')('changelog:getGitLogCommands');\n\nfunction getGitLogCommands() {\n  debug('getting log commands');\n  this.cmd.gitLog = 'git log --grep=\"%s\" -i -E --format=%s %s..' + (this.options.branch ? this.options.branch : 'HEAD');\n  this.cmd.gitLogNoTag = 'git log ' + this.options.branch + ' --grep=\"%s\" -i -E --format=%s';\n}\n\nmodule.exports = getGitLogCommands;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/parse-raw-commit.js":"'use strict';\n\nvar debug = require('debug')('changelog:parseRawCommit');\n\nfunction parseLine(msg, line) {\n  var match = line.match(/(?:Closes|Fixes)\\s#(\\d+)/);\n  if (match) {\n    msg.closes.push(parseInt(match[1], 10));\n  }\n}\n\nfunction parseRawCommit(raw) {\n  debug('parsing raw commit');\n  if (!raw) {\n    return null;\n  }\n\n  var lines = raw.split('\\n');\n  var msg = {}, match;\n\n  msg.closes = [];\n  msg.breaks = [];\n\n  lines.forEach(parseLine.bind(null, msg));\n\n  msg.hash = lines.shift();\n  msg.subject = lines.shift();\n\n  match = raw.match(/BREAKING CHANGE:([\\s\\S]*)/);\n  if (match) {\n    msg.breaking = match[1];\n  }\n\n  msg.body = lines.join('\\n');\n  match = msg.subject.match(/^(.*)\\((.*)\\)\\:\\s(.*)$/);\n  //@TODO: match merges and pull request messages\n  if (!match) {\n    match = msg.subject.match(/^(.*)\\:\\s(.*)$/);\n    \n    if (!match) {\n      //console.log(msg.subject, '------------');\n      this.log('warn', 'Incorrect message:', msg.hash, msg.subject);\n      //return null;\n    }\n    msg.type = match ? match[1] : null;\n    msg.subject = match ? match[2] : msg.subject;\n\n    return msg;\n  }\n  msg.type = match[1];\n  msg.component = match[2];\n  msg.subject = match[3];\n\n  return msg;\n}\n\nmodule.exports = parseRawCommit;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/link-to-issue.js":"'use strict';\n\nvar debug = require('debug')('changelog:linkToIssue');\nvar format = require('util').format;\n\nfunction linkToIssue(issue) {\n  debug('generating link to issue');\n  return format(this.links.issue, issue, issue);\n}\n\nmodule.exports = linkToIssue;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/link-to-commit.js":"'use strict';\n\nvar debug = require('debug')('changelog:linkToCommit');\nvar format = require('util').format;\n\nfunction linkToCommit(hash) {\n  debug('generating link to commit');\n  return format(this.links.commit, hash.substr(0, 8), hash);\n}\n\nmodule.exports = linkToCommit;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/current-date.js":"'use strict';\n\nvar debug = require('debug')('changelog:currentDate');\nvar format = require('util').format;\n\nfunction pad(i) {\n  return ('0' + i).substr(-2);\n}\n\nfunction currentDate() {\n  debug('getting current date');\n  var now = new Date();\n  return format('%d-%s-%s', now.getFullYear(), pad(now.getMonth() + 1), pad(now.getDate()));\n}\n\nmodule.exports = currentDate;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/print-header.js":"'use strict';\n\nvar debug = require('debug')('changelog:printHeader');\nvar format = require('util').format;\n\n//Templates\nvar logoTemplate = '<img width=\"300px\" src=\"%s\" />\\n\\n';\nvar titleTemplate = '__%s__\\n\\n';\nvar subtitleTemplate = '_%s_\\n\\n';\nvar versionTemplate = '# %s (%s)\\n\\n';\n\nfunction printHeader(stream, options, date) {\n\n  debug('printing header');\n  if(options.logo){\n    stream.write(format(logoTemplate, options.logo));\n  }\n\n  stream.write(format(titleTemplate, options.app_name));\n\n  if(options.intro){\n    stream.write(format(subtitleTemplate, options.intro));\n  }\n\n  stream.write(format(versionTemplate, options.version_name || '', date));\n  stream.write('\\n\\n---\\n');\n}\n\nmodule.exports = printHeader;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/print-section.js":"'use strict';\n\nvar debug = require('debug')('changelog:printSection');\nvar format = require('util').format;\n\nfunction printCommitStream(stream, printCommitLinks, prefix, commit) {\n  if (printCommitLinks) {\n    stream.write(format('%s %s\\n  (%s', prefix, commit.subject, this.linkToCommit(commit.hash)));\n\n    if (commit.closes.length) {\n      stream.write(',\\n   ' + commit.closes.map(this.linkToIssue, this).join(', '));\n    }\n    stream.write(')\\n');\n  } else {\n    stream.write(format('%s %s\\n', prefix, commit.subject));\n  }\n}\n\nfunction printComponent(stream, printCommitLinks, component) {\n  var prefix = '-';\n  \n  var nested = component.commits.length > 1;\n  if (nested) {\n    stream.write(format('- **%s:**\\n', component.name));\n    prefix = '  -';\n  } else {\n    prefix = format('- **%s:**', component.name);\n  }\n\n  component.commits.forEach(printCommitStream.bind(this, stream, printCommitLinks, prefix), this);\n}\n\nfunction printSection(stream, section) {\n  try{\n\n  debug('printing section ...');\n\n  if (!section.commits.length && !section.components.length) {\n    return;\n  }\n\n\n  stream.write(format('\\n## %s\\n\\n', section.title));\n\n  section.commits.forEach(printCommitStream.bind(this, stream, section.printCommitLinks, '-'), this);\n \n  section.components.forEach(printComponent.bind(this, stream, section.printCommitLinks), this);\n\n  stream.write('\\n');\n\n  }catch(e){\n    console.log(e);\n  }\n}\n\nmodule.exports = printSection;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/print-commit.js":"\nvar debug = require('debug')('changelog:printSection');\nvar format = require('util').format;\n\nfunction printCommit(commit, printCommitLinks) {\n  var prefix = '';\n  var result = '';\n\n  if (printCommitLinks) {\n    result += format('%s\\n  (%s', commit.subject, this.linkToCommit(commit.hash));\n\n    if (commit.closes.length) {\n     result += ',\\n   ' + commit.closes.map(this.linkToIssue, this).join(', ');\n    }\n    result += ')\\n';\n  } else {\n    result += format('%s\\n', commit.subject);\n  }\n\n  return result;\n}\n\nmodule.exports = printCommit;","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/print-salute.js":"'use strict';\n\nvar debug = require('debug')('changelog:printSalute');\n\nfunction printSalute(stream) {\n  debug('printing salute');\n  stream.write('\\n\\n---\\n');\n  stream.write('<sub><sup>*Generated with [git-changelog](https://github.com/rafinskipg/git-changelog). If you have any problems or suggestions, create an issue.* :) **Thanks** </sub></sup>');\n}\n\nmodule.exports = printSalute;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/read-gitlog.js":"'use strict';\n\nvar debug = require('debug')('changelog:readGitLog');\nvar format = require('util').format;\nvar child = require('child_process');\nvar q = require('q');\n\nfunction processRawCommit(commits, rawCommit) {\n  var commit = this.parseRawCommit(rawCommit);\n  if (commit) {\n    commits.push(commit);\n  }\n}\n\nfunction cmdDone(deferred, code, stdout, stderr) {\n  debug('returning from git log command');\n  var commits = [];\n\n  stdout\n    .split('\\n==END==\\n')\n    .forEach(processRawCommit.bind(this, commits), this);\n\n  deferred.resolve(commits);\n}\n\nfunction gitLogCommand(git_log_command, from) {\n  if (git_log_command === this.cmd.gitLog) {\n    return format(git_log_command, this.options.grep_commits, '%H%n%s%n%b%n==END==', from);\n  } else {\n    return format(git_log_command, this.options.grep_commits, '%H%n%s%n%b%n==END==');\n  }\n}\n\nfunction readGitLog(git_log_command, from) {\n  debug('reading git log ...');\n  var deferred = q.defer();\n\n  git_log_command = gitLogCommand.call(this, git_log_command, from);\n  this.log('debug', 'Executing : ', git_log_command);\n  debug('executing git log command');\n  child.exec(git_log_command , {timeout: 1000}, cmdDone.bind(this, deferred));\n\n  return deferred.promise;\n}\n\nmodule.exports = readGitLog;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/write-change-log.js":"'use strict';\n\nvar debug = require('debug')('changelog:writeChangelog');\nvar format = require('util').format;\nvar _ = require('lodash');\nvar fse = require('fs-extra');\n\nfunction sendToStream(stream, sections) {\n\n  var module = this;\n\n  this.printHeader(stream, this.options, this.currentDate());\n \n  sections.forEach(function(section){\n    module.printSection(stream, section);\n  });\n\n  this.printSalute(stream);\n  stream.end();\n}\n\nfunction writeChangelog(commits) {\n  var module = this;\n\n  debug('writing change log');\n  var sections = this.organizeCommits(commits, this.options.sections);\n  var stream;\n  \n  var data = {\n    logo: module.options.logo,\n    sections: sections,\n    intro: module.options.intro,\n    title: module.options.app_name,\n    version:{\n      number: module.options.tag,\n      name: module.options.version_name,\n      date: new Date()//Todo get the date of the tag\n    } \n  };\n\n  return new Promise(function(resolve, reject){\n\n    module.loadTemplate(data)\n      .then(function(template){\n\n        if (module.options.file) {\n          stream = fse.createOutputStream(module.options.file);\n        } else {\n          stream = process.stdout;\n        }\n\n        if(template){\n          debug('Proceding with template');\n\n          stream.on('open', function(){\n            var lines = template.split('\\n');\n\n            lines.forEach(function(line){\n              stream.write(line);\n              stream.write('\\n');\n            });\n\n            stream.end();\n            stream.on('finish', resolve);\n          });\n        }else{\n          debug('Proceding with legacy output');\n          \n          stream.on('open', sendToStream.bind(module, stream, sections));\n          stream.on('finish', resolve);\n        }\n\n      })\n      .catch(reject);\n  });\n}\n\n\n\n\nmodule.exports = writeChangelog;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/organize-commits.js":"'use strict';\n\nvar debug = require('debug')('changelog:organizeCommits');\nvar format = require('util').format;\nvar _ = require('lodash');\n\nfunction grepSection(sections, commit){\n  //TODO: MONKEY METHOD, please use the regexp greps\n\n  var keys = Object.keys(sections);\n\n  for (var i = 0; i < keys.length; i++){\n    if(commit.subject.indexOf(keys[i]) === 0){\n      return sections[keys[i]];\n    }\n  }\n\n  return null;\n}\n\nfunction organizeCommit(sections, commit) {\n  var section = commit.type ? sections[commit.type] : grepSection(sections, commit) ;\n  \n  var component = commit.component ? commit.component.toLowerCase() : this.emptyComponent;\n\n  if (section) {\n    section.commitsCount++;\n    \n    if(component === this.emptyComponent){\n      section.commits.push(commit);\n    }else{\n      section.components[component] = section.components[component] || [];\n      section.components[component].push(commit);  \n    }\n  }\n\n  if (commit.breaking) {\n    //Add it to the breaking list))\n    sections.BREAKING.commitsCount++;\n    var breakingCommit = {\n      subject: format(\"due to %s,\\n %s\", this.linkToCommit(commit.hash), commit.breaking),\n      hash: commit.hash,\n      closes: []\n    };\n\n    if(component === this.emptyComponent){\n      sections.BREAKING.commits.push(breakingCommit);\n    }else{\n      sections.BREAKING.components[component] = sections.BREAKING.components[component] || [];\n      sections.BREAKING.components[component].push(breakingCommit);  \n    }\n  }\n}\n\nfunction organizeCommits(commits, defaultSections) {\n  commits = commits ? commits : [];\n\n  var sections = {\n    BREAKING : {\n      components: {},\n      commitsCount: 0,\n      title: 'Breaking Changes',\n      commits: [],\n      type: 'BREAKING',\n      printCommitLinks: false\n    }\n  };\n\n  defaultSections.forEach(function(sectionInfo){\n    var sectionType = sectionInfo.grep.replace('^', '');\n    \n    sections[sectionType] = {\n      title: sectionInfo.title,\n      components: {},\n      commits: [],\n      commitsCount: 0,\n      type: sectionType,\n      printCommitLinks: sectionInfo.printCommitLinks === false ? false : true\n    };\n  });\n\n  debug('organizaing commits');\n\n  commits.forEach(organizeCommit.bind(this, sections), this);\n\n  return _.compact(Object.keys(sections).map(function(key){\n    var section = sections[key];\n    \n    section.components = Object.keys(section.components).sort().map(function(key){\n      return { name: key, \n        commits: section.components[key]\n      };\n    });\n\n    return section.commitsCount > 0 ? section : null;\n  }));\n}\n\nmodule.exports = organizeCommits;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/get-previous-tag.js":"'use strict';\n\nvar debug = require('debug')('changelog:getPreviousTag');\nvar child = require('child_process');\n\nfunction cmdDone(resolve, reject, code, stdout, stderr) {\n  debug('returning from git tag');\n  //I think this command it's actually not working and always return empty\n  // Consider trying git describe --abbrev=0 --tags\n  if (code) {\n    reject();\n  } else {\n    resolve(stdout.replace('\\n', ''));\n  }\n}\n\nfunction getPreviousTag() {\n  var module = this;\n\n  return new Promise(function(resolve, reject){\n    if (module.options.tag) {\n      resolve(module.options.tag);\n    } else if (module.options.tag === false) {\n      resolve(false);\n    } else {\n      module.log('debug', 'Getting last tag');\n      //IF we dont find a previous tag, we get all the commits from the beggining - The bigbang of the code\n      debug('calling git tag command');\n      child.exec(module.cmd.gitTag, cmdDone.bind(null, resolve, reject));\n    }  \n  });\n}\n\nmodule.exports = getPreviousTag;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/get-repo-url.js":"'use strict';\n\nvar debug = require('debug')('changelog:getRepoUrl');\nvar child = require('child_process');\nvar q = require('q');\n\nfunction cmdDone(deferred, code, stdout, stderr) {\n  debug('returning git repo url command');\n  if (code) {\n    deferred.reject(\"Sorry, you've not configured an origin remote or passed a `repo_url` config value\");\n  } else {\n    stdout = stdout.replace('\\n', '').replace('.git', '');\n    deferred.resolve(stdout);\n  }\n}\n\nfunction getRepoUrl() {\n  debug('getting repo url');\n  var deferred = q.defer();\n\n  if (this.options.repo_url) {\n    deferred.resolve(this.options.repo_url);\n  } else {\n    //IF we dont find a previous tag, we get all the commits from the beginning - The bigbang of the code\n    debug('calling git repo url command');\n    child.exec(this.cmd.gitRepoUrl, cmdDone.bind(null, deferred));\n  }\n\n  return deferred.promise;\n}\n\nmodule.exports = getRepoUrl;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/generate.js":"'use strict';\n\nvar debug = require('debug')('changelog:generate');\n\nfunction generateFromCommits(commits, sections) {\n  this.message('parsed commits', commits.length);\n  this.log('debug', 'Parsed', commits.length, 'commits');\n  this.log('info','Generating changelog to', this.options.file || 'stdout', '(', this.options.version_name, ')');\n\n  return this.writeChangelog(commits, sections);\n}\n\nfunction generateFromTag(tag) {\n  var readGitLog;\n  \n  if (typeof(tag) !== 'undefined' && tag && tag !== false) {\n    this.log('info', 'Reading git log since', tag);\n    this.message('since tag', tag);\n    readGitLog = this.readGitLog.bind(this, this.cmd.gitLog, tag);\n  } else {\n    this.log('info', 'Reading git log since the beggining');\n    this.message('since beggining');\n    readGitLog = this.readGitLog.bind(this, this.cmd.gitLogNoTag);\n  }\n\n  return readGitLog()\n    .then(generateFromCommits.bind(this))\n    .catch(console.log.bind(console, 'error'));\n}\n\nfunction generate(params, loadRC) {\n  debug('generating ...');\n  var self = this;\n\n  return this.init(params, loadRC)\n    .then(this.getPreviousTag.bind(this))\n    .then(generateFromTag.bind(this))\n    .then(function(){\n      return self.options;\n    })\n    .catch(function(err){\n      self.log('error', err);\n      throw(err);\n    });\n}\n\nmodule.exports = generate;\n","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/lib/log.js":"'use strict';\nvar colors = require('colors');\nvar debug = require('debug')('changelog:log');\n\nfunction getColor(type){\n  var colorList = {\n    'info' : 'blue',\n    'success' : 'green',\n    'error' : 'red',\n    'debug' : 'cyan',\n    'warn' : 'yellow'\n  };\n\n  return colorList[type] ;\n}\n\nfunction log() {\n\n  var args = Array.prototype.slice.call(arguments);\n  var type = args.length >= 2 ? args[0] : 'info';\n  \n  if(args.length >= 2){\n    args.splice(0, 1);\n  }\n\n  var color = getColor(type);\n\n  if( (this.options && this.options.debug) || type === 'info' || type === 'error' || type === 'success'){\n    console.log(colors[color].apply(null, args));\n  }\n}\n\nmodule.exports = log;","/home/travis/build/npmtest/node-npmtest-git-changelog/node_modules/git-changelog/tasks/git_changelog.js":"/*\n * git-changelog\n * https://github.com/rafinskipg/git-changelog\n *\n * Copyright (c) 2013 rafinskipg\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n  \n  //Separated Logic in other file \n  var git_changelog = require('./git_changelog_generate');\n\n  var defaults = require('./defaults');\n\n  grunt.registerMultiTask('git_changelog', 'A git changelog tool', function() {\n\n    var done = this.async();\n    // Options object \n    var options = this.options(defaults);\n\n    git_changelog.generate(options).then(function(){\n      done();\n    });\n\n  });\n\n};\n"}